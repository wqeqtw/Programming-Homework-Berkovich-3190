#include <stdio.h>
#include <stdlib.h>

#define N 3

int invertMatrix(float matrix[N][N], float inverse[N][N]) {
    int i, j, k;
    float ratio;


    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            inverse[i][j] = (i == j) ? 1.0 : 0.0;
        }
    }


    for (i = 0; i < N; i++) {
        if (matrix[i][i] == 0.0) {
            printf("Матрица не является обратимой.\n");
            return 0;
        }
        for (j = 0; j < N; j++) {
            if (i != j) {
                ratio = matrix[j][i] / matrix[i][i];
                for (k = 0; k < N; k++) {
                    matrix[j][k] -= ratio * matrix[i][k];
                    inverse[j][k] -= ratio * inverse[i][k];
                }
            }
        }
    }


    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            inverse[i][j] /= matrix[i][i];
        }
        matrix[i][i] = 1.0;
    }
    return 1;
}

void printMatrix(float matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%8.3f ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    float matrix[N][N] = {
        {2, -1, 0},
        {-1, 2, -1},
        {0, -1, 2}
    };

    float inverse[N][N];

    printf("Исходная матрица:\n");
    printMatrix(matrix);

    if (invertMatrix(matrix, inverse)) {
        printf("\n Обратная матрица:\n");
        printMatrix(inverse);
    } else {
        printf("\n Не удалось найти обратную матрицу.\n");
    }

    return 0;
}
